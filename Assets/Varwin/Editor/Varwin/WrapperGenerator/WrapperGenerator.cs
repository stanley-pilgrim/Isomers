using System;
using System.CodeDom;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using Microsoft.CSharp;
using UnityEditor;
using UnityEngine;
using Varwin.Core;
using Varwin.Core.Behaviours;
using Varwin.Public;

namespace Varwin.Editor
{
    public class VarwinObjectBuildException : Exception
    {
    }

    public class WrapperGenerator
    {
        private const string ValidationFieldName = "__validation";
        private const string ConvertedPrefix = "__converted_";

        public const string AnimationEnumName = "Animations";

        private static string _wrapperTemplatePath = @"/Varwin/Editor/Varwin/Templates/ObjectWrapper.txt";
        private static string _wrapperAutogenerationMark = @"VARWIN_AUTOGEN_MARK";

        public static void RemoveWrapperIfNeeded(VarwinObjectDescriptor varwinObjectDescriptor)
        {
            if (!VarwinBuilder.DeleteWrappers)
            {
                return;
            }

            string wrapperPath = GetWrapperPath(varwinObjectDescriptor);

            if (!string.IsNullOrEmpty(wrapperPath) && File.Exists(wrapperPath))
            {
                string oldWrapperCode = File.ReadAllText(wrapperPath);

                if (oldWrapperCode.Contains(_wrapperAutogenerationMark))
                {
                    File.Delete(wrapperPath);
                }
            }
        }

        public static string GenerateWrapper(VarwinObjectDescriptor varwinObjectDescriptor)
        {
            string wrapperPath = GetWrapperPath(varwinObjectDescriptor);

            //Check if this wrapper is autogenerated
            if (File.Exists(wrapperPath))
            {
                string oldWrapperCode = File.ReadAllText(wrapperPath);

                if (!oldWrapperCode.Contains(_wrapperAutogenerationMark))
                {
                    Debug.LogWarning(string.Format(SdkTexts.CannotAutoGenerateWrapperFormat, wrapperPath));
                    return wrapperPath;
                }
            }

            string wrapperText = GenerateWrapperText(varwinObjectDescriptor);

            File.WriteAllText(wrapperPath, wrapperText);

            return wrapperPath;
        }

        private static string GenerateWrapperText(VarwinObjectDescriptor varwinObjectDescriptor)
        {
            string wrapperCs = File.ReadAllText(Application.dataPath + _wrapperTemplatePath);

            wrapperCs = wrapperCs.Replace("{%Namespace%}", varwinObjectDescriptor.Namespace);
            wrapperCs = wrapperCs.Replace("{%WrapperType%}", $"{varwinObjectDescriptor.Name}Wrapper");

            var componentReferencesText = string.Empty;
            var componentReferencesInitializationText = string.Empty;
            var valueListsText = string.Empty;
            var valuesText = string.Empty;
            var propertiesText = string.Empty;
            var checkersText = string.Empty;
            var actionsText = string.Empty;
            var eventsText = string.Empty;
            var eventsSubscriptionText = string.Empty;
            var valueListsInitializationText = string.Empty;
            var dynamicsText = string.Empty;
            var animationEnums = string.Empty;

            foreach (ComponentReference componentReference in varwinObjectDescriptor.Components)
            {
                Type componentType = componentReference.Type;

                if (SdkIgnoredScripts.ContainsType(componentType) || componentReference.Component is VarwinBehaviour)
                {
                    continue;
                }

                var properties = componentType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                var methods = componentType.GetMethods(BindingFlags.Public | BindingFlags.Instance);
                var events = componentType.GetEvents(BindingFlags.Public | BindingFlags.Instance);
                var fields = componentType.GetFields(BindingFlags.Public | BindingFlags.Instance);

                
                if (!InspectorMethodsChecker.CheckInspectorMethodsSignature(componentReference.Component, out var wrongMethods))
                {
                    var errorMessage = $"It's not allowed to use {nameof(VarwinInspectorAttribute)} with methods that contains any parameters." +
                                       $"Object: {componentReference.Component.gameObject}, Component: {componentReference.Component} " +
                                       $"Methods: {string.Join(",", wrongMethods.ConvertAll(x => x.Name))}";

                    Debug.LogError(errorMessage);
                    throw new Exception(errorMessage);
                }

                var valueListFieldTypes = GetValueListFieldTypes(fields);

                var enumTypes = ParseMethodsForCustomEnums(methods);
                enumTypes.AddRange(ParsePropertiesForCustomEnums(properties));

                var customEnumValueDescriptorsList = GetCustomEnumValueDescriptors(enumTypes);

                componentReferencesText += $"public readonly {componentType.FullName} {componentReference.Name};\n";
                componentReferencesInitializationText += GenerateComponentReferencesInitialization(componentReference, varwinObjectDescriptor);

                animationEnums += GenerateAnimationsEnum(componentReference) + "\n\n";

                valuesText += GenerateValues(componentReference, fields) + "\n\n";
                propertiesText += GenerateProperties(componentReference, properties) + "\n\n";
                checkersText += GenerateCheckers(componentReference, methods) + "\n\n";
                actionsText += GenerateActions(componentReference, methods) + "\n\n" +
                               GenerateFunctions(componentReference, methods) + "\n\n";
                eventsText += GenerateEvents(componentReference, events) + "\n\n";
                eventsSubscriptionText += GenerateEventsSubscriptions(componentReference, events) + "\n\n";

                valueListsInitializationText +=
                    GenerateGenericValueListsInitialization(componentReference, fields, valueListFieldTypes)
                    + GenerateCustomEnumValueListsInitialization(componentReference, customEnumValueDescriptorsList)
                    + GenerateAnimationEnumInitialization(componentReference, varwinObjectDescriptor)
                    + "\n\n";
                dynamicsText += GenerateDynamics(componentReference, methods) + "\n\n";
            }

            wrapperCs = wrapperCs.Replace("{%ComponentReferences%}", componentReferencesText);
            wrapperCs = wrapperCs.Replace("{%ComponentReferencesInitialization%}", componentReferencesInitializationText);
            wrapperCs = wrapperCs.Replace("{%ValueLists%}", valueListsText);
            wrapperCs = wrapperCs.Replace("{%Values%}", valuesText);
            wrapperCs = wrapperCs.Replace("{%Properties%}", propertiesText);
            wrapperCs = wrapperCs.Replace("{%Checkers%}", checkersText);
            wrapperCs = wrapperCs.Replace("{%Actions%}", actionsText);
            wrapperCs = wrapperCs.Replace("{%Events%}", eventsText);
            wrapperCs = wrapperCs.Replace("{%EventsSubscription%}", eventsSubscriptionText);
            wrapperCs = wrapperCs.Replace("{%ValueListsInitialization%}", valueListsInitializationText);
            wrapperCs = wrapperCs.Replace("{%Dynamics%}", dynamicsText);
            wrapperCs = wrapperCs.Replace("{%AnimationEnum%}", animationEnums);

            return wrapperCs;
        }

        private static string GetWrapperPath(VarwinObjectDescriptor varwinObjectDescriptor)
        {
            if (!string.IsNullOrEmpty(varwinObjectDescriptor.Prefab))
            {
                return Path.Combine(Path.GetDirectoryName(varwinObjectDescriptor.Prefab), $"{varwinObjectDescriptor.Name}Wrapper.cs");
            }

            return null;
        }

        #region Basic generators

        private static string GenerateComponentReferencesInitialization(ComponentReference componentReference, VarwinObjectDescriptor varwinObjectDescriptor)
        {
            int varwinObjectCount = varwinObjectDescriptor.Components.Where(x => x.Component is VarwinObject).ToArray().Length;
            Type componentType = componentReference.Type;

            if (componentReference.Component is VarwinObject && varwinObjectCount == 1)
            {
                return $"{componentReference.Name} = ({componentType.FullName}) VarwinObjectDescriptor.GetComponentInChildren<Varwin.Public.VarwinObject>(true);\n";
            }

            return
                $"{componentReference.Name} = ({componentType.FullName}) VarwinObjectDescriptor.Components.FirstOrDefault(x => x.Name == \"{componentReference.Name}\")?.Component;\n";
        }

        private static string GenerateLocalizedParameterAttribute(ParameterInfo parameter)
        {
            var parameterAttribute = parameter.GetCustomAttribute<ParameterAttribute>();

            if (parameterAttribute == null)
            {
                return string.Empty;
            }

            var generatedAttribute = string.Empty;
            generatedAttribute += $"[ParameterAttribute( {GenerateLocalizationCodeString(parameterAttribute.LocalizedNames)} )]";

            return generatedAttribute;
        }

        private static string GenerateGenericValueLists(ComponentReference componentReference, Dictionary<string, Type> valueListFieldTypes)
        {
            var valueListsGeneratedString = "";

            foreach (var valueList in valueListFieldTypes)
            {
                valueListsGeneratedString +=
                    $"public Dictionary<string, {valueList.Value}> {Wrapper.GetValidValueListName($"{componentReference.PrefixName}{valueList.Key}")};\n";
            }

            return valueListsGeneratedString;
        }

        private static string GenerateCustomEnumValueLists(ComponentReference componentReference, Dictionary<string, List<CustomEnumValueDescriptor>> customEnumValueDescriptorsList)
        {
            var valueListsGeneratedString = "";

            foreach (var customEnumValueList in customEnumValueDescriptorsList)
            {
                valueListsGeneratedString +=
                    $"public Dictionary<string, int> {Wrapper.GetValidValueListName($"{componentReference.PrefixName}{customEnumValueList.Key}")};\n";
            }

            return valueListsGeneratedString;
        }

        private static string GenerateAnimationsEnum(ComponentReference componentReference)
        {
            var generatedEnum = "";

            if (componentReference.Type == typeof(VarwinAnimationPlayer))
            {
                var valueListName = "";

                if (componentReference.Component is VarwinAnimationPlayer varwinAnimationPlayer)
                {
                    var customAnimations = varwinAnimationPlayer.CustomAnimations;

                    if (customAnimations.Count > 0)
                    {
                        generatedEnum = $"public enum {AnimationEnumName}\n";
                        generatedEnum += "{\n";
                        
                        for (var i = 0; i < customAnimations.Count; i++)
                        {
                            var customAnimation = customAnimations[i];
                            if (customAnimation == null)
                            {
                                Debug.LogWarning($"Not assigned animation clip for {componentReference.Component} in {componentReference.Component.gameObject}");
                                continue;
                            }

                            if (!customAnimation.Clip)
                            {
                                Debug.LogWarning($"Not assigned animation clip for {componentReference.Component} in {componentReference.Component.gameObject}");
                                continue;
                            }

                            I18n localizedNames = customAnimation.Name.ToI18N();
                            if (localizedNames.en == null && localizedNames.ru == null)
                            {
                                localizedNames.en = customAnimation.Clip.name;
                            }

                            generatedEnum += $"\t[Item({GenerateLocalizationCodeString(localizedNames)})]\n";

                            var clipName = customAnimation.Clip.name;
                            clipName = Regex.Replace(clipName, "[^0-9A-Za-z_]", "_");
                            
                            generatedEnum += $"\tAnimationClip_{clipName}{i} = {i},\n";
                        }

                        generatedEnum += "}\n";
                    }
                }
            }

            return generatedEnum;
        }


        private static string GenerateGenericValueListsInitialization(ComponentReference componentReference, FieldInfo[] fields, Dictionary<string, Type> valueListFieldTypes)
        {
            if (valueListFieldTypes.Count == 0)
            {
                return string.Empty;
            }

            var valueListsInitializationCode = "";

            foreach (var field in fields)
            {
                var valueAttribute = field.GetCustomAttribute<ValueAttribute>();
                var valueListAttribute = field.GetCustomAttribute<ValueListAttribute>();

                if (valueAttribute == null || valueListAttribute == null)
                {
                    continue;
                }

                var fullTypeName = $"{field.DeclaringType.FullName}Wrapper.{field.Name}";
                valueListsInitializationCode += $"Varwin.DynamicValueDictionary.Set(\"{fullTypeName}\", {componentReference.Name}.@{field.Name});\n";
            }
            
            valueListsInitializationCode += "\n";

            return valueListsInitializationCode;
        }

        private static string GenerateCustomEnumValueListsInitialization(ComponentReference componentReference, Dictionary<string, List<CustomEnumValueDescriptor>> customEnumValueDescriptorLists)
        {
            if (customEnumValueDescriptorLists.Count == 0)
            {
                return string.Empty;
            }

            var valueListsInitializationCode = "";

            foreach (var customEnumValueDescriptors in customEnumValueDescriptorLists.Values)
            {
                foreach (var customEnumValueDescriptor in customEnumValueDescriptors)
                {
                    var fullTypeName = customEnumValueDescriptor.FullTypeName;
                    valueListsInitializationCode += $"DynamicValueDictionary.Set(\"{fullTypeName}\", {fullTypeName});\n";
                }
            }
            
            return valueListsInitializationCode;
        }

        private static string GenerateAnimationEnumInitialization(ComponentReference componentReference, VarwinObjectDescriptor objectDescriptor)
        {
            var animationEnumDictionaryInitialization = "";

            if (componentReference.Type == typeof(VarwinAnimationPlayer))
            {
                var valueListName = "";

                if (componentReference.Component is VarwinAnimationPlayer varwinAnimationPlayer)
                {
                    var customAnimations = varwinAnimationPlayer.CustomAnimations;

                    if (customAnimations.Count > 0)
                    {
                        var index = 0;
                        foreach (var customAnimation in customAnimations)
                        {
                            if (!customAnimation.Clip)
                            {
                                Debug.LogWarning($"Not assigned animation clip for {componentReference.Component} in {componentReference.Component.gameObject}");
                                ++index;
                                continue;
                            }
                            
                            var key = $"Varwin.Types.{objectDescriptor.Namespace}.{objectDescriptor.Name}Wrapper.{AnimationEnumName}";
                            
                            var clipName = customAnimation.Clip.name;
                            
                            var clipKey = $"{key}.{clipName}".Replace("\"", "\"\"");
                            
                            var clipValue = $"{key}.AnimationClip_{Regex.Replace(clipName, "[^0-9A-Za-z_]", "_")}";
                            
                            animationEnumDictionaryInitialization += $"Varwin.DynamicValueDictionary.Set(@\"{clipKey}{index}\", {clipValue}{index});\n";
                            
                            ++index;
                        }

                        animationEnumDictionaryInitialization += "\n";
                    }
                }
            }

            return animationEnumDictionaryInitialization;
        }

        public static List<Type> ParseMethodsForCustomEnums(MethodInfo[] methodInfo)
        {
            var customEnumsList = new List<Type>();

            foreach (var method in methodInfo)
            {
                var actionAttribute = method.GetCustomAttribute<ActionAttribute>();
                var functionAttribute = method.GetCustomAttribute<FunctionAttribute>();
                var checkerAttribute = method.GetCustomAttribute<CheckerAttribute>();

                if (actionAttribute == null && functionAttribute == null && checkerAttribute == null)
                {
                    continue;
                }

                var parameterInfo = method.GetParameters();

                foreach (var parameter in parameterInfo)
                {
                    if (parameter.ParameterType.BaseType != typeof(Enum))
                    {
                        continue;
                    }

                    if (parameter.ParameterType.IsNotPublic)
                    {
                        ThrowObjectBuildError(SdkTexts.EnumIsPrivateFormat, parameter.ParameterType.Name);
                    }

                    if (!customEnumsList.Contains(parameter.ParameterType))
                    {
                        customEnumsList.Add(parameter.ParameterType);
                    }
                }
            }

            return customEnumsList;
        }

        public static List<Type> ParseEventsForCustomEnums(EventInfo[] eventInfos)
        {
            var customEnumsList = new List<Type>();

            foreach (var eventInfo in eventInfos)
            {
                var variableAttribute = eventInfo.GetCustomAttribute<LogicEventAttribute>();

                if (variableAttribute == null)
                {
                    continue;
                }

                var parameters = eventInfo.EventHandlerType.GetMethod("Invoke")?.GetParameters();

                if (parameters == null)
                {
                    continue;
                }
                
                foreach (var parameter in parameters)
                {
                    if (parameter.ParameterType.BaseType != typeof(Enum))
                    {
                        continue;
                    }

                    if (!customEnumsList.Contains(parameter.ParameterType))
                    {
                        customEnumsList.Add(parameter.ParameterType);
                    }
                }
            }

            return customEnumsList;
        }
        
        public static List<Type> ParsePropertiesForCustomEnums(PropertyInfo[] propertyInfos)
        {
            var customEnumsList = new List<Type>();

            foreach (var property in propertyInfos)
            {
                var variableAttribute = property.GetCustomAttribute<VariableAttribute>();

                if (variableAttribute == null)
                {
                    continue;
                }

                var propertyType = property.PropertyType;

                if (propertyType.BaseType != typeof(Enum))
                {
                    continue;
                }

                if (!customEnumsList.Contains(propertyType))
                {
                    customEnumsList.Add(propertyType);
                }
            }

            return customEnumsList;
        }

        private static Dictionary<string, Type> GetValueListFieldTypes(FieldInfo[] fields)
        {
            var valueListFieldTypes = new Dictionary<string, Type>();

            foreach (FieldInfo field in fields)
            {
                var valueListAttribute = field.GetCustomAttribute<ValueListAttribute>();

                if (valueListAttribute == null)
                {
                    continue;
                }

                foreach (string listName in valueListAttribute.ListNames)
                {
                    if (valueListFieldTypes.ContainsKey(listName))
                    {
                        if (valueListFieldTypes[listName] != field.FieldType)
                        {
                            ThrowObjectBuildError(SdkTexts.InconsistentValueListObjectTypesFormat, listName);
                        }
                    }
                    else
                    {
                        valueListFieldTypes.Add(listName, field.FieldType);
                    }
                }
            }

            return valueListFieldTypes;
        }

        public static Dictionary<string, List<GenericValueDescriptor>> GetValueListValueDescriptors(FieldInfo[] fields)
        {
            var valueListValueDescriptors = new Dictionary<string, List<GenericValueDescriptor>>();

            foreach (FieldInfo field in fields)
            {
                var valueAttribute = field.GetCustomAttribute<ValueAttribute>();
                var valueListAttribute = field.GetCustomAttribute<ValueListAttribute>();

                if (valueAttribute == null || valueListAttribute == null)
                {
                    continue;
                }

                foreach (string listName in valueListAttribute.ListNames)
                {
                    var genericValue = new GenericValueDescriptor(field.Name, valueAttribute.LocalizedNames);

                    genericValue.FullTypeName = $"{field.DeclaringType.FullName}.{field.Name}";
                    if (valueListValueDescriptors.ContainsKey(listName))
                    {
                        valueListValueDescriptors[listName].Add(genericValue);
                    }
                    else
                    {
                        valueListValueDescriptors.Add(listName, new List<GenericValueDescriptor>() {genericValue});
                    }
                }
            }

            return valueListValueDescriptors;
        }

        public static Dictionary<string, List<CustomEnumValueDescriptor>> GetCustomEnumValueDescriptors(List<Type> types)
        {
            var customEnumTypes = types;

            var customEnumValueDescriptors = new Dictionary<string, List<CustomEnumValueDescriptor>>();

            foreach (Type enumType in customEnumTypes)
            {
                var valueDescriptors = new List<CustomEnumValueDescriptor>();

                var memberInfo = enumType.GetMembers(BindingFlags.Public | BindingFlags.Static);
                var logicGroupAttribute = enumType.GetCustomAttribute<LogicGroupAttribute>(true);

                foreach (MemberInfo enumMember in memberInfo)
                {
                    var itemAttribute = enumMember.GetCustomAttribute<ItemAttribute>();

                    I18n localizedNames = itemAttribute == null
                        ? new I18n {en = enumMember.Name}
                        : itemAttribute.LocalizedNames;

                    var fullEnumValueTypeName = $"{enumType.FullName.Replace('+', '.')}.{enumMember.Name}";
                    var descriptor = new CustomEnumValueDescriptor(enumMember.Name, localizedNames, (int)Enum.Parse(enumType, enumMember.Name), fullEnumValueTypeName);

                    if (logicGroupAttribute != null)
                    {
                        descriptor.Group = logicGroupAttribute.LocalizedNames;
                    }

                    valueDescriptors.Add(descriptor);
                }

                customEnumValueDescriptors.TryAdd($"{enumType.Name}", valueDescriptors);
            }

            return customEnumValueDescriptors;
        }

        private static string GenerateValues(ComponentReference componentReference, FieldInfo[] fields)
        {
            var values = "";

            foreach (FieldInfo field in fields)
            {
                var value = field.GetCustomAttribute<ValueAttribute>();
                var valueList = field.GetCustomAttribute<ValueListAttribute>();

                if (value != null)
                {
                    values += GenerateSingleValue(componentReference, field, value, valueList);
                }
            }

            return values;
        }

        private static string GenerateProperties(ComponentReference componentReference, PropertyInfo[] properties)
        {
            var gettersAndSetters = "";

            foreach (PropertyInfo property in properties)
            {
                var getter = property.GetCustomAttribute<GetterAttribute>();
                var setter = property.GetCustomAttribute<SetterAttribute>();
                var variable = property.GetCustomAttribute<VariableAttribute>();

                CheckPropertyInspectorMethods(property, componentReference);

                if (getter != null || setter != null || variable != null)
                {
                    gettersAndSetters += GenerateVariableGroup(property);
                    gettersAndSetters +=
                        GenerateGetterAndSetter(componentReference, property, getter, setter, variable);
                }
            }

            return gettersAndSetters;
        }

        private static void CheckPropertyInspectorMethods(PropertyInfo property, ComponentReference componentReference)
        {
            var inspector = property.GetCustomAttribute<VarwinInspectorAttribute>();
            if (inspector == null)
            {
                return;
            }

            if (property.GetMethod == null || property.SetMethod == null)
            {
                var missingMethod = property.GetMethod == null ? "Getter" : "Setter";

                EditorUtility.DisplayDialog(SdkTexts.InspectorPropertyMissGetterOrSetterTitle,
                    string.Format(SdkTexts.InspectorPropertyMissGetterOrSetter, missingMethod, property.Name, componentReference.Component.name), "OK", "Cancel");

                throw new MissingMethodException(componentReference.Name, $"{property.Name}: {missingMethod}");
            }
        }

        private static string GenerateCheckers(ComponentReference componentReference, MethodInfo[] methods)
        {
            var checkers = "";

            foreach (MethodInfo method in methods)
            {
                var checker = method.GetCustomAttribute<CheckerAttribute>();

                if (checker != null)
                {
                    checkers += GenerateChecker(componentReference, method, checker);
                }
            }

            return checkers;
        }

        private static string GenerateActions(ComponentReference componentReference, MethodInfo[] methods)
        {
            var actionsCode = "";

            foreach (MethodInfo method in methods)
            {
                var action = method.GetCustomAttribute<ActionAttribute>();

                if (action != null)
                {
                    if (method.ReturnType != typeof(void) && method.ReturnType != typeof(IEnumerator))
                    {
                        ThrowObjectBuildError(SdkTexts.ActionShouldReturnValueFormat, method.Name);
                    }

                    actionsCode += GenerateAction(componentReference, method, action);
                }
            }

            return actionsCode;
        }

        private static string GenerateFunctions(ComponentReference componentReference, MethodInfo[] methods)
        {
            var functionsCode = "";

            foreach (MethodInfo method in methods)
            {
                var function = method.GetCustomAttribute<FunctionAttribute>();

                if (function != null)
                {
                    if (method.ReturnType == typeof(void) || method.ReturnType == typeof(IEnumerator))
                    {
                        ThrowObjectBuildError(SdkTexts.MethodShouldReturnValueFormat, method.Name);
                    }

                    functionsCode += GenerateFunction(componentReference, method, function);
                }
            }

            return functionsCode;
        }

        private static string GenerateEvents(ComponentReference componentReference, EventInfo[] events)
        {
            var eventsCode = "";

            foreach (EventInfo eventInfo in events)
            {
                var legacyEventAttribute = eventInfo.GetCustomAttribute<EventAttribute>();
                var logicEventAttribute = eventInfo.GetCustomAttribute<LogicEventAttribute>();

                if (legacyEventAttribute == null && logicEventAttribute == null)
                {
                    continue;
                }

                var isLegacyEvent = legacyEventAttribute != null;
                Attribute attribute = isLegacyEvent ? legacyEventAttribute : logicEventAttribute;

                var customSenderAttribute = eventInfo.GetCustomAttribute<EventCustomSenderAttribute>();

                if (attribute != null)
                {
                    Type delegateType = eventInfo.EventHandlerType;
                    MethodInfo method = delegateType.GetMethod("Invoke");

                    if (method != null && method.ReturnType != typeof(void))
                    {
                        ThrowObjectBuildError(SdkTexts.EventAttributeNotVoidHandlerFormat, eventInfo.Name);
                    }

                    eventsCode += GenerateEventCode(componentReference, eventInfo, attribute, customSenderAttribute, isLegacyEvent);
                }
            }

            return eventsCode;
        }

        private static string GenerateEventsSubscriptions(ComponentReference componentReference, EventInfo[] events)
        {
            var subscriptionsCode = "";

            foreach (EventInfo eventInfo in events)
            {
                var legacyEventAttribute = eventInfo.GetCustomAttribute<EventAttribute>();
                var eventAttribute = eventInfo.GetCustomAttribute<LogicEventAttribute>();

                if (legacyEventAttribute != null || eventAttribute != null)
                {
                    subscriptionsCode += GenerateEventSubscriptionCode(componentReference, eventInfo);
                }
            }

            return subscriptionsCode;
        }

        private static string GenerateDynamics(ComponentReference componentReference, MethodInfo[] methods)
        {
            return "";
        }

        #endregion

        #region Block generators

        private static string GenerateSingleValue(ComponentReference componentReference, FieldInfo field, ValueAttribute valueAttribute, ValueListAttribute valueListAttribute)
        {
            var singleValueField = "";

            if (field.GetCustomAttribute<System.ObsoleteAttribute>() != null)
            {
                singleValueField += $"[System.ObsoleteAttribute]\n";
            }

            if (valueAttribute.LocalizedNames == null)
            {
                singleValueField += $"[Value(\"{valueAttribute.Name.ToEscaped()}\")]\n";
                singleValueField += GenerateLocalization(field);
                singleValueField += $"public string @{componentReference.PrefixName}{field.Name};\n\n";
            }
            else
            {
                if (valueListAttribute == null)
                {
                    ThrowObjectBuildError(SdkTexts.ValueAttributeWithoutValueListFormat,
                        $"\"{field.FieldType} {componentReference.PrefixName}{field.Name}\"");
                }

                var listNames = "";

                for (var i = 0; i < valueListAttribute.ListNames.Count; i++)
                {
                    if (i != 0)
                    {
                        listNames += ", ";
                    }

                    listNames += $"\"{componentReference.PrefixName}{valueListAttribute.ListNames[i]}\"";
                }

                singleValueField += $"[ValueList({listNames})]\n";
                singleValueField += "[Value(" + GenerateLocalizationCodeString(valueAttribute.LocalizedNames) + ")]\n";
                singleValueField += $"public {field.FieldType} @{componentReference.PrefixName}{field.Name};\n\n";
            }

            return singleValueField;
        }

        private static string GenerateGetterAndSetter(ComponentReference componentReference, PropertyInfo property, GetterAttribute getter, SetterAttribute setter, VariableAttribute variable)
        {
            var getterSetterField = "";
            var argsFormatAttribute = property.GetCustomAttribute<ArgsFormatAttribute>();

            bool getterIsPrivate = property.GetMethod == null || property.GetMethod.IsPrivate || property.GetMethod.IsFamily;
            bool setterIsPrivate = property.SetMethod == null || property.SetMethod.IsPrivate || property.SetMethod.IsFamily;
            bool observeIsPrivate = property.SetMethod == null || property.SetMethod.IsPrivate || property.SetMethod.IsFamily;
            bool ignoreGetter = property.GetCustomAttribute<IgnoreLogicEditorGetterAttribute>() != null;

            if (getterIsPrivate && setterIsPrivate)
            {
                ThrowObjectBuildError(SdkTexts.ValueIsPrivateFormat, property.Name);
            }

            if (property.GetMethod != null && ignoreGetter)
            {
                getterSetterField += $"[{typeof(IgnoreLogicEditorGetterAttribute)}]\n";
            }

            if (getter != null)
            {
                if (getterIsPrivate)
                {
                    ThrowObjectBuildError(SdkTexts.GetterIsPrivateFormat, property.Name);
                }

                getterSetterField += $"[Getter(\"{getter.Name.ToEscaped()}\")]\n";
            }

            if (setter != null)
            {
                if (setterIsPrivate)
                {
                    ThrowObjectBuildError(SdkTexts.SetterIsPrivateFormat, property.Name);
                }

                getterSetterField += $"[Setter(\"{setter.Name.ToEscaped()}\")]\n";
            }
            
            if (variable != null)
            {
                var logicGroup = property.GetCustomAttribute<LogicGroupAttribute>()?.LocalizedNames;
                if (logicGroup != null)
                {
                    getterSetterField += "[LogicGroup(" + GenerateLocalizationCodeString(logicGroup) + ")]\n";
                }

                var logicTooltip = property.GetCustomAttribute<LogicTooltipAttribute>()?.LocalizedNames;
                if (logicTooltip != null)
                {
                    getterSetterField += "[LogicTooltip(" + GenerateLocalizationCodeString(logicTooltip) + ")]\n";
                }
                
                getterSetterField += "[Variable(" + GenerateLocalizationCodeString(variable.LocalizedNames) + ")]\n";
            }

            if (variable != null || setter != null || getter != null)
            {
                if (property.GetCustomAttribute<System.ObsoleteAttribute>() != null)
                {
                    getterSetterField += $"[System.ObsoleteAttribute]\n";
                }

                getterSetterField += GenerateLocalization(property);
            }

            if (argsFormatAttribute != null)
            {
                getterSetterField += GenerateArgsFormat(property);
            }

            string typeName;
            using (var provider = new CSharpCodeProvider())
            {
                var typeRef = new CodeTypeReference(property.PropertyType);
                typeName = provider.GetTypeOutput(typeRef);

                if (property.GetCustomAttributes(typeof(DynamicAttribute), true).Length > 0)
                {
                    typeName = Regex.Replace(typeName, @"\bobject\b", "dynamic");
                }
            }

            var propertyName = $"{componentReference.PrefixName}{property.Name}";

            if (typeName == "dynamic")
            {
                getterSetterField += $"public {typeName} {propertyName} {{\n";                
            }
            else
            {
                getterSetterField += $"[{nameof(SourceTypeContainerAttribute)}(typeof({typeName}))]\n";
                getterSetterField += $"public dynamic {propertyName} {{\n";                
            }

            if (!getterIsPrivate)
            {
                getterSetterField += $"get {{ return DebugUtils.ExecuteFunctionWithTryCatch(() => {componentReference.Name}.{property.Name}, VarwinObjectDescriptor.gameObject); }}\n";
            }

            if (!setterIsPrivate)
            {
                getterSetterField += "set {";
                getterSetterField += GenerateSetterWithValidation(property, propertyName);

                getterSetterField += $"DebugUtils.ExecuteActionWithTryCatch(() => {componentReference.Name}.{property.Name} = {ConvertedPrefix}value, VarwinObjectDescriptor.gameObject); \n";
                getterSetterField += "}";
            }

            getterSetterField += "}\n\n";

            return getterSetterField;
        }

        private static string GenerateSetterWithValidation(PropertyInfo propertyInfo, string propertyName)
        {
            if (propertyInfo == null)
            {
                return string.Empty;
            }

            var propertyTypeString = GetValidTypeName(propertyInfo.PropertyType);
            string validationString = $"if( !Varwin.{nameof(Validation)}.{nameof(Validation.ValidateAndConvert)}((dynamic)value, typeof({propertyTypeString}), out dynamic {ConvertedPrefix}value))\n";
            validationString += $"{{\n Debug.LogError(Varwin.{nameof(TypeValidationUtils)}.{nameof(TypeValidationUtils.GetSetterValidateError)}(this, value, nameof({propertyName}))); \n";
            validationString += $"return;}}";
            
            return validationString;
        }

        private static string GenerateChecker(ComponentReference componentReference, MethodInfo method, CheckerAttribute checker)
        {
            var checkerField = "";

            checkerField += GenerateCheckerGroup(method);
            checkerField += GenerateArgsFormat(method);

            var defaultValueType = method.GetCustomAttribute<DefaultValueTypeAttribute>();
            if (defaultValueType != null)
            {
                checkerField += GenerateDefaultValueTypesAttribute(defaultValueType) + "\n";
            }
            
            var defaultValue = method.GetCustomAttribute<DefaultValueAttribute>();
            if (defaultValue != null)
            {
                checkerField += GenerateDefaultValuesAttribute(defaultValue) + "\n";
            }
            
            if (method.GetCustomAttribute<System.ObsoleteAttribute>() != null)
            {
                checkerField += $"[System.ObsoleteAttribute]\n";
            }

            var logicGroup = method.GetCustomAttribute<LogicGroupAttribute>()?.LocalizedNames;
            if (logicGroup != null)
            {
                checkerField += "[LogicGroup(" + GenerateLocalizationCodeString(logicGroup) + ")]\n";
            }

            var logicTooltip = method.GetCustomAttribute<LogicTooltipAttribute>()?.LocalizedNames;
            if (logicTooltip != null)
            {
                checkerField += "[LogicTooltip(" + GenerateLocalizationCodeString(logicTooltip) + ")]\n";
            }

            if (checker?.LocalizedNames != null)
            {
                checkerField += $"[Checker({GenerateLocalizationCodeString(checker.LocalizedNames)})]\n";
            }
            else
            {
                checkerField += $"[Checker(\"{checker?.Name.ToEscaped()}\")]\n";
            }

            checkerField += GenerateLocalization(method);
            
            checkerField += $"public bool {componentReference.PrefixName}{method.Name}(";
            checkerField += GenerateMethodParameters(componentReference, method);

            var executeParameters = GenerateConvertedParameters(method);
            var methodName = $"{componentReference.PrefixName}{method.Name}";
            var validationString = GenerateValidationMethodString(method, methodName);
            checkerField += $") {{ \n {validationString}\n";
            checkerField += $"return DebugUtils.ExecuteFunctionWithTryCatch(() => {componentReference.Name}.{method.Name}({executeParameters}), VarwinObjectDescriptor.gameObject); }}\n\n";

            return checkerField;
        }

        private static string GenerateAction(ComponentReference componentReference, MethodInfo method, ActionAttribute action)
        {
            var actionField = "";

            actionField += GenerateActionGroup(method);
            actionField += GenerateArgsFormat(method);

            var logicGroup = method.GetCustomAttribute<LogicGroupAttribute>()?.LocalizedNames;
            if (logicGroup != null)
            {
                actionField += "[LogicGroup(" + GenerateLocalizationCodeString(logicGroup) + ")]\n";
            }

            var logicTooltip = method.GetCustomAttribute<LogicTooltipAttribute>()?.LocalizedNames;
            if (logicTooltip != null)
            {
                actionField += "[LogicTooltip(" + GenerateLocalizationCodeString(logicTooltip) + ")]\n";
            }

            var defaultValueType = method.GetCustomAttribute<DefaultValueTypeAttribute>();
            if (defaultValueType != null)
            {
                actionField += GenerateDefaultValueTypesAttribute(defaultValueType) + "\n";
            }
            
            var defaultValue = method.GetCustomAttribute<DefaultValueAttribute>();
            if (defaultValue != null)
            {
                actionField += GenerateDefaultValuesAttribute(defaultValue) + "\n";
            }

            if (method.GetCustomAttribute<ObsoleteAttribute>() != null)
            {
                actionField += $"[System.ObsoleteAttribute]\n";
            }

            if (action?.LocalizedNames != null)
            {
                actionField += $"[Action({GenerateLocalizationCodeString(action.LocalizedNames)})]\n";
            }
            else
            {
                actionField += $"[Action(\"{action?.Name.ToEscaped()}\")]\n";
            }

            actionField += GenerateLocalization(method);
            var returnTypeName = "";

            var methodName = $"{componentReference.PrefixName}{method.Name}";

            using (var provider = new CSharpCodeProvider())
            {
                var returnTypeRef = new CodeTypeReference(method.ReturnType);
                returnTypeName = provider.GetTypeOutput(returnTypeRef);
                actionField += $"public {returnTypeName} {methodName} (";
            }
            
            string validationString = GenerateValidationMethodString(method, methodName);
            actionField += GenerateMethodParameters(componentReference, method);

            string executeParameters = GenerateConvertedParameters(method);

            if (method.ReturnType == typeof(void))
            {
                actionField += $") {{ \n {validationString}\n";
                actionField += $"DebugUtils.ExecuteActionWithTryCatch(() => {componentReference.Name}.{method.Name}({executeParameters}), VarwinObjectDescriptor.gameObject); }}";
            }
            else
            {
                actionField += $") {{ \n {validationString}\n";
                actionField += $" yield return DebugUtils.StartCoroutineWithTryCatch({componentReference.Name}.{method.Name}({executeParameters}), VarwinObjectDescriptor.gameObject); }}\n\n";
            }

            return actionField;
        }

        private static string GenerateValidationMethodString(MethodInfo method, string methodName)
        {
            var parameters = method.GetParameters();
            
            if (parameters.Length == 0)
            {
                return string.Empty;
            }

            string validationCall = $"Varwin.{nameof(Validation)}.{nameof(Validation.ValidateAndConvert)}";

            string validationString = string.Empty;

            for (var i = 0; i < parameters.Length; i++)
            {
                var parameter = parameters[i];

                if (parameter.GetCustomAttributes(typeof(DynamicAttribute), true).Length > 0)
                {
                    continue;
                }
                
                var paramTypeName = GetValidTypeName(parameter.ParameterType);

                string returnString;
                if (method.ReturnType == typeof(IEnumerator))
                {
                    returnString = "yield break";
                }
                else if (method.ReturnType == typeof(void))
                {
                    returnString = "return";
                }
                else
                {
                    returnString = $"return default({GetValidTypeName(method.ReturnType)})";
                }

                validationString +=
                    $"if( !{validationCall} ({parameter.Name}, typeof({paramTypeName}), out dynamic {ConvertedPrefix}{parameter.Name} ))\n" +
                    $" {{\n Debug.LogError(Varwin.{nameof(TypeValidationUtils)}.{nameof(TypeValidationUtils.GetMethodValidateError)}(this, {parameter.Name}, nameof({methodName}), {i}));" +
                    $" {returnString};\n}}";
            }

            return validationString;
        }

        private static string GetValidTypeName(Type type)
        {
            using var provider = new CSharpCodeProvider();
            var typeRef = new CodeTypeReference(type);
            return provider.GetTypeOutput(typeRef);
        }

        private static string GenerateFunction(ComponentReference componentReference, MethodInfo method, FunctionAttribute function)
        {
            var functionField = "";

            functionField += GenerateFunctionGroup(method);
            functionField += GenerateArgsFormat(method);

            var logicGroup = method.GetCustomAttribute<LogicGroupAttribute>()?.LocalizedNames;

            if (logicGroup != null)
            {
                functionField += "[LogicGroup(" + GenerateLocalizationCodeString(logicGroup) + ")]\n";
            }

            var logicTooltip = method.GetCustomAttribute<LogicTooltipAttribute>()?.LocalizedNames;
            if (logicTooltip != null)
            {
                functionField += "[LogicTooltip(" + GenerateLocalizationCodeString(logicTooltip) + ")]\n";
            }
            
            if (method.GetCustomAttribute<System.ObsoleteAttribute>() != null)
            {
                functionField += $"[System.ObsoleteAttribute]\n";
            }

            if (function?.LocalizedNames != null)
            {
                functionField += $"[Function({GenerateLocalizationCodeString(function.LocalizedNames)})]\n";
            }

            var defaultValueType = method.GetCustomAttribute<DefaultValueTypeAttribute>();
            if (defaultValueType != null)
            {
                functionField += GenerateDefaultValueTypesAttribute(defaultValueType) + "\n";
            }
            
            var defaultValue = method.GetCustomAttribute<DefaultValueAttribute>();
            if (defaultValue != null)
            {
                functionField += GenerateDefaultValuesAttribute(defaultValue) + "\n";
            }

            functionField += GenerateLocalization(method);

            using (var provider = new CSharpCodeProvider())
            {
                var returnTypeRef = new CodeTypeReference(method.ReturnType);
                functionField += $"public {provider.GetTypeOutput(returnTypeRef)} {componentReference.PrefixName}{method.Name} (";
            }

            functionField += GenerateMethodParameters(componentReference, method);

            var methodName = $"{componentReference.PrefixName}{method.Name}";
            var validationString = GenerateValidationMethodString(method, methodName);
            
            string executeParameters = GenerateConvertedParameters(method);

            functionField += $") {{ \n {validationString}\n";
            functionField += $"return DebugUtils.ExecuteFunctionWithTryCatch(() => {componentReference.Name}.{method.Name}({executeParameters}), VarwinObjectDescriptor.gameObject); }}\n\n";

            return functionField;
        }

        private static string GenerateDefaultValueTypesAttribute(DefaultValueTypeAttribute defaultValueTypeAttribute)
        {
            using (var provider = new CSharpCodeProvider())
            {
                var result = "[DefaultValueType(";
                for (var index = 0; index < defaultValueTypeAttribute.DefaultValueTypes.Length; index++)
                {
                    var defaultValueType = defaultValueTypeAttribute.DefaultValueTypes[index];
                    var typeRef = new CodeTypeReference(defaultValueType);
                    string paramTypeName = provider.GetTypeOutput(typeRef);
                    result += $"typeof({paramTypeName})";
                    if (index < defaultValueTypeAttribute.DefaultValueTypes.Length - 1)
                    {
                        result += ", ";
                    }
                }

                return result + ")]";
            }
        }
        
        private static string GenerateDefaultValuesAttribute(DefaultValueAttribute defaultValueAttribute)
        {
            var result = "[DefaultValue(";
            for (var index = 0; index < defaultValueAttribute.DefaultValues.Length; index++)
            {
                var defaultValue = defaultValueAttribute.DefaultValues[index];
                if (defaultValue is string stringValue)
                {
                    result += @"""" + stringValue + @"""";    
                }
                else if (defaultValue is bool boolValue)
                {
                    result += boolValue ? "true" : "false";
                }
                else if (defaultValue == null)
                {
                    result += "null";
                }
                else
                {
                    result += defaultValue;
                }
                
                if (index < defaultValueAttribute.DefaultValues.Length - 1)
                {
                    result += ", ";
                }
            }

            return result + ")]";
        }

        private static string GenerateVariableGroup(PropertyInfo propertyInfo)
        {
            var groupAttribute = propertyInfo.GetCustomAttribute<VariableGroupAttribute>();

            if (groupAttribute == null)
            {
                return string.Empty;
            }

            var groupName = "";
            groupName += $"[VariableGroup(\"{groupAttribute.GroupName.ToEscaped()}\")]\n";

            return groupName;
        }

        private static string GenerateCheckerGroup(MethodInfo method)
        {
            var groupAttribute = method.GetCustomAttribute<CheckerGroupAttribute>();

            if (groupAttribute == null)
            {
                return string.Empty;
            }

            var groupName = "";
            groupName += "[CheckerGroup(\"" + groupAttribute.GroupName.ToEscaped() + "\")]\n";

            return groupName;
        }

        private static string GenerateActionGroup(MethodInfo method)
        {
            var groupAttribute = method.GetCustomAttribute<ActionGroupAttribute>();

            if (groupAttribute == null)
            {
                return string.Empty;
            }

            var groupName = "";
            groupName += "[ActionGroup(\"" + groupAttribute.GroupName.ToEscaped() + "\")]\n";

            return groupName;
        }

        private static string GenerateFunctionGroup(MethodInfo method)
        {
            var groupAttribute = method.GetCustomAttribute<FunctionGroupAttribute>();

            if (groupAttribute == null)
            {
                return string.Empty;
            }

            var groupName = "";
            groupName += "[FunctionGroup(\"" + groupAttribute.GroupName.ToEscaped() + "\")]\n";

            return groupName;
        }

        private static string GenerateEventGroup(EventInfo eventInfo)
        {
            var groupAttribute = eventInfo.GetCustomAttribute<EventGroupAttribute>();

            if (groupAttribute == null)
            {
                return string.Empty;
            }

            var groupName = "";
            groupName += "[EventGroup(\"" + groupAttribute.GroupName.ToEscaped() + "\")]\n";

            return groupName;
        }

        private static string GenerateConvertedParameters(MethodInfo method)
        {
            var parameters = method.GetParameters().OrderBy(p => p.Position).ToArray();
            var result = string.Empty;

            for (var i = 0; i < parameters.Length; i++)
            {
                var parameter = parameters[i];
                var paramTypeName = GetValidTypeName(parameter.ParameterType);
                
                if (parameter.GetCustomAttributes(typeof(DynamicAttribute), true).Length > 0)
                {
                    result += $"{parameter.Name}";
                }
                else
                {
                    result += $"({paramTypeName}){ConvertedPrefix}{parameter.Name}";
                }
                
                if (i < parameters.Length - 1)
                {
                    result += ", ";
                }
            }

            return result;
        }
        
        private static string GenerateMethodParameters(ComponentReference componentReference, MethodInfo method)
        {
            var parameters = method.GetParameters().OrderBy(p => p.Position).ToArray();
            var result = string.Empty;

            for (var i = 0; i < parameters.Length; i++)
            {
                var parameter = parameters[i];
                var paramAttribute = GenerateLocalizedParameterAttribute(parameter) + 
                                          GenerateGenericUseValueListAttribute(componentReference, parameter) +
                                          GenerateCustomEnumUseValueListAttribute(componentReference, parameter, method);
                
                var paramTypeName = GetValidTypeName(parameter.ParameterType);

                var useSourceTypeContainer = parameter.GetCustomAttributes(typeof(DynamicAttribute), true).Length == 0;

                if (useSourceTypeContainer)
                {
                    paramAttribute += $"[{nameof(SourceTypeContainerAttribute)}(typeof({paramTypeName}))] ";
                }

                result += $"{paramAttribute} dynamic {parameter.Name}";

                if (i < parameters.Length - 1)
                {
                    result += ", ";
                }
            }

            return result;
        }

        private static string GenerateGenericUseValueListAttribute(ComponentReference componentReference, ParameterInfo parameter)
        {
            var useValueListAttribute = parameter.GetCustomAttribute<UseValueListAttribute>();

            if (useValueListAttribute == null)
            {
                return string.Empty;
            }

            var generatedAttribute = string.Empty;

            generatedAttribute += "[UseValueList( ";

            for (var i = 0; i < useValueListAttribute.ListNames.Count; i++)
            {
                if (i != 0)
                {
                    generatedAttribute += ", ";
                }

                generatedAttribute += $"\"{componentReference.PrefixName}{useValueListAttribute.ListNames[i]}\"";
            }

            generatedAttribute += ")]";

            return generatedAttribute;
        }

        private static string GenerateCustomEnumUseValueListAttribute(ComponentReference componentReference, ParameterInfo parameter, MethodInfo method)
        {
            if (parameter.ParameterType.BaseType != typeof(Enum) ||
                parameter.ParameterType.Namespace != method.DeclaringType.Namespace)
            {
                return string.Empty;
            }

            return $"[UseValueList(\"{parameter.ParameterType.Name}\")]";
        }

        private static string GenerateEventCode(ComponentReference componentReference, EventInfo eventInfo, Attribute eventAttribute,
            EventCustomSenderAttribute customSenderAttribute, bool isLegacyEvent)
        {
            var eventField = "";

            eventField += GenerateEventGroup(eventInfo);
            eventField += GenerateArgsFormat(eventInfo);

            var logicEvent = isLegacyEvent ? null : eventAttribute as LogicEventAttribute;
            var legacyEvent = isLegacyEvent ? eventAttribute as EventAttribute : null;

            var logicGroup = eventInfo.GetCustomAttribute<LogicGroupAttribute>()?.LocalizedNames;
            if (logicGroup != null && !isLegacyEvent)
            {
                eventField += "[LogicGroup(" + GenerateLocalizationCodeString(logicGroup) + ")]\n";
            }

            var logicTooltip = eventInfo.GetCustomAttribute<LogicTooltipAttribute>()?.LocalizedNames;
            if (logicTooltip != null && !isLegacyEvent)
            {
                eventField += "[LogicTooltip(" + GenerateLocalizationCodeString(logicTooltip) + ")]\n";
            }

            if (eventInfo.GetCustomAttribute<System.ObsoleteAttribute>() != null)
            {
                eventField += $"[System.ObsoleteAttribute]\n";
            }

            var localizedNames = isLegacyEvent ? legacyEvent.LocalizedNames : logicEvent.LocalizedNames;
            var attributeType = isLegacyEvent ? "Event" : "LogicEvent";

            if (localizedNames != null)
            {
                eventField += $"[{attributeType}(" + GenerateLocalizationCodeString(localizedNames) + ")]\n";
            }
            else if(isLegacyEvent)
            {
                eventField += "[Event(\"" + legacyEvent.Name.ToEscaped() + "\")]\n";
            }

            if (customSenderAttribute != null && customSenderAttribute.LocalizedSender != null)
            {
                eventField += "[EventCustomSender(" + GenerateLocalizationCodeString(customSenderAttribute.LocalizedSender) + ")]\n";
            }

            eventField += GenerateLocalization(eventInfo);

            string typeName;
            using (var provider = new CSharpCodeProvider())
            {
                var typeRef = new CodeTypeReference(eventInfo.EventHandlerType);
                typeName = provider.GetTypeOutput(typeRef);
            }

            eventField += $"public event {typeName} {componentReference.PrefixName}{eventInfo.Name};\n\n";

            eventField += $"public void {componentReference.PrefixName}{eventInfo.Name}Invoke(";

            var parameters = eventInfo.EventHandlerType.GetMethod("Invoke").GetParameters()
                .OrderBy(p => p.Position).ToArray();

            var parametersCalling = "";
            using (var provider = new CSharpCodeProvider())
            {
                for (var i = 0; i < parameters.Length; i++)
                {
                    ParameterInfo parameter = parameters[i];

                    var typeRef = new CodeTypeReference(parameter.ParameterType);
                    string paramTypeName = provider.GetTypeOutput(typeRef);

                    if (parameter.GetCustomAttributes(typeof(DynamicAttribute), true).Length > 0)
                    {
                        paramTypeName = "dynamic";
                    }

                    eventField += paramTypeName + " " + parameter.Name;
                    parametersCalling += parameter.Name;

                    if (i + 1 < parameters.Length)
                    {
                        eventField += ", ";
                        parametersCalling += ", ";
                    }
                }
            }

            eventField += $") {{ {componentReference.PrefixName}{eventInfo.Name}?.Invoke({parametersCalling}); }}\n\n";

            return eventField;
        }

        private static string GenerateEventSubscriptionCode(ComponentReference componentReference, EventInfo eventInfo)
        {
            return $"{componentReference.Name}.{eventInfo.Name} += {componentReference.PrefixName}{eventInfo.Name}Invoke;\n";
        }

        #endregion

        #region Values generation

        private static string GenerateArgsFormat(MethodInfo method)
        {
            var argsFormat = method.GetCustomAttribute<ArgsFormatAttribute>();

            if (argsFormat == null)
            {
                return string.Empty;
            }

            var args = "";

            if (!CheckIfArgsFormatIsValid(argsFormat, method.GetParameters().Length))
            {
                ThrowObjectBuildError(SdkTexts.ArgsFormatNumberOfArgumentsMismatchFormat, $"{method.DeclaringType}.{method.Name}");
            }

            args += "[ArgsFormat(" + GenerateLocalizationCodeString(argsFormat.LocalizedFormat) + ")]\n";

            return args;
        }

        private static string GenerateArgsFormat(EventInfo eventInfo)
        {
            var argsFormat = eventInfo.GetCustomAttribute<ArgsFormatAttribute>();

            if (argsFormat == null)
            {
                return string.Empty;
            }

            var args = "";

            if (!CheckIfArgsFormatIsValid(argsFormat,
                eventInfo.EventHandlerType.GetMethod("Invoke").GetParameters().Length))
            {
                ThrowObjectBuildError(SdkTexts.ArgsFormatNumberOfArgumentsMismatchFormat, $"{eventInfo.DeclaringType}.{eventInfo.Name}");
            }

            args += "[ArgsFormat(" + GenerateLocalizationCodeString(argsFormat.LocalizedFormat) + ")]\n";

            return args;
        }

        private static string GenerateArgsFormat(PropertyInfo propertyInfo)
        {
            var argsFormat = propertyInfo.GetCustomAttribute<ArgsFormatAttribute>();

            if (argsFormat == null)
            {
                return string.Empty;
            }

            var args = "";

            if (!CheckIfArgsFormatIsValid(argsFormat, 1))
            {
                ThrowObjectBuildError(SdkTexts.ArgsFormatNumberOfArgumentsMismatchFormat, $"{propertyInfo.DeclaringType}.{propertyInfo.Name}");
            }

            args += "[ArgsFormat(" + GenerateLocalizationCodeString(argsFormat.LocalizedFormat) + ")]\n";

            return args;
        }

        private static bool CheckIfArgsFormatIsValid(ArgsFormatAttribute argsFormat, int requiredArgsNumber)
        {
            string[] argsFormatStrings =
            {
                argsFormat.LocalizedFormat.af,
                argsFormat.LocalizedFormat.ar,
                argsFormat.LocalizedFormat.ba,
                argsFormat.LocalizedFormat.be,
                argsFormat.LocalizedFormat.bu,
                argsFormat.LocalizedFormat.ca,
                argsFormat.LocalizedFormat.cn,
                argsFormat.LocalizedFormat.cn_s,
                argsFormat.LocalizedFormat.cn_t,
                argsFormat.LocalizedFormat.cz,
                argsFormat.LocalizedFormat.da,
                argsFormat.LocalizedFormat.du,
                argsFormat.LocalizedFormat.en,
                argsFormat.LocalizedFormat.es,
                argsFormat.LocalizedFormat.fa,
                argsFormat.LocalizedFormat.fi,
                argsFormat.LocalizedFormat.fr,
                argsFormat.LocalizedFormat.ge,
                argsFormat.LocalizedFormat.gr,
                argsFormat.LocalizedFormat.he,
                argsFormat.LocalizedFormat.hu,
                argsFormat.LocalizedFormat.ic,
                argsFormat.LocalizedFormat.it,
                argsFormat.LocalizedFormat.jp,
                argsFormat.LocalizedFormat.ko,
                argsFormat.LocalizedFormat.la,
                argsFormat.LocalizedFormat.li,
                argsFormat.LocalizedFormat.no,
                argsFormat.LocalizedFormat.pg,
                argsFormat.LocalizedFormat.po,
                argsFormat.LocalizedFormat.ro,
                argsFormat.LocalizedFormat.ru,
                argsFormat.LocalizedFormat.se,
                argsFormat.LocalizedFormat.sk,
                argsFormat.LocalizedFormat.sp,
                argsFormat.LocalizedFormat.sv,
                argsFormat.LocalizedFormat.sw,
                argsFormat.LocalizedFormat.th,
                argsFormat.LocalizedFormat.tu,
                argsFormat.LocalizedFormat.uk,
                argsFormat.LocalizedFormat.vi,
                argsFormat.LocalizedFormat.ind
            };

            foreach (string argsFormatString in argsFormatStrings)
            {
                if (argsFormatString == null)
                {
                    continue;
                }

                if (Regex.Matches(argsFormatString, "{%}").Count != requiredArgsNumber)
                {
                    return false;
                }
            }

            return true;
        }
        #endregion


        #region GENERATE LOCALIZATION

        private static string GenerateLocalizationCodeString(I18n localization)
        {
            var result = "";
            result += "English: " + localization.en.GenerateSourceCodeString();

            if (localization.af != null)
            {
                result += ", Afrikaans: " + localization.af.GenerateSourceCodeString();
            }

            if (localization.ar != null)
            {
                result += ", Arabic: " + localization.ar.GenerateSourceCodeString();
            }

            if (localization.ba != null)
            {
                result += ", Basque: " + localization.ba.GenerateSourceCodeString();
            }

            if (localization.be != null)
            {
                result += ", Belarusian: " + localization.be.GenerateSourceCodeString();
            }

            if (localization.bu != null)
            {
                result += ", Bulgarian: " + localization.bu.GenerateSourceCodeString();
            }

            if (localization.ca != null)
            {
                result += ", Catalan: " + localization.ca.GenerateSourceCodeString();
            }

            if (localization.cn != null)
            {
                result += ", Chinese: " + localization.cn.GenerateSourceCodeString();
            }

            if (localization.cz != null)
            {
                result += ", Czech: " + localization.cz.GenerateSourceCodeString();
            }

            if (localization.cz != null)
            {
                result += ", Czech: " + localization.cz.GenerateSourceCodeString();
            }

            if (localization.da != null)
            {
                result += ", Danish: " + localization.da.GenerateSourceCodeString();
            }

            if (localization.du != null)
            {
                result += ", Dutch: " + localization.du.GenerateSourceCodeString();
            }

            if (localization.es != null)
            {
                result += ", Estonian: " + localization.es.GenerateSourceCodeString();
            }

            if (localization.fa != null)
            {
                result += ", Faroese: " + localization.fa.GenerateSourceCodeString();
            }

            if (localization.fi != null)
            {
                result += ", Finnish: " + localization.fi.GenerateSourceCodeString();
            }

            if (localization.fr != null)
            {
                result += ", French: " + localization.fr.GenerateSourceCodeString();
            }

            if (localization.ge != null)
            {
                result += ", German: " + localization.ge.GenerateSourceCodeString();
            }

            if (localization.gr != null)
            {
                result += ", Greek: " + localization.gr.GenerateSourceCodeString();
            }

            if (localization.he != null)
            {
                result += ", Hebrew: " + localization.he.GenerateSourceCodeString();
            }

            if (localization.hu != null)
            {
                result += ", Hungarian: " + localization.hu.GenerateSourceCodeString();
            }

            if (localization.ic != null)
            {
                result += ", Icelandic: " + localization.ic.GenerateSourceCodeString();
            }

            if (localization.ind != null)
            {
                result += ", Indonesian: " + localization.ind.GenerateSourceCodeString();
            }

            if (localization.it != null)
            {
                result += ", Italian: " + localization.it.GenerateSourceCodeString();
            }

            if (localization.jp != null)
            {
                result += ", Japanese: " + localization.jp.GenerateSourceCodeString();
            }

            if (localization.ko != null)
            {
                result += ", Korean: " + localization.ko.GenerateSourceCodeString();
            }

            if (localization.la != null)
            {
                result += ", Latvian: " + localization.la.GenerateSourceCodeString();
            }

            if (localization.li != null)
            {
                result += ", Lithuanian: " + localization.li.GenerateSourceCodeString();
            }

            if (localization.no != null)
            {
                result += ", Norwegian: " + localization.no.GenerateSourceCodeString();
            }

            if (localization.po != null)
            {
                result += ", Polish: " + localization.po.GenerateSourceCodeString();
            }

            if (localization.pg != null)
            {
                result += ", Portuguese: " + localization.pg.GenerateSourceCodeString();
            }

            if (localization.ro != null)
            {
                result += ", Romanian: " + localization.ro.GenerateSourceCodeString();
            }

            if (localization.ru != null)
            {
                result += ", Russian: " + localization.ru.GenerateSourceCodeString();
            }

            if (localization.se != null)
            {
                result += ", SerboCroatian: " + localization.se.GenerateSourceCodeString();
            }

            if (localization.sk != null)
            {
                result += ", Slovak: " + localization.sk.GenerateSourceCodeString();
            }

            if (localization.sv != null)
            {
                result += ", Slovenian: " + localization.sv.GenerateSourceCodeString();
            }

            if (localization.sp != null)
            {
                result += ", Spanish: " + localization.sp.GenerateSourceCodeString();
            }

            if (localization.sw != null)
            {
                result += ", Swedish: " + localization.sw.GenerateSourceCodeString();
            }

            if (localization.th != null)
            {
                result += ", Thai: " + localization.th.GenerateSourceCodeString();
            }

            if (localization.tu != null)
            {
                result += ", Turkish: " + localization.tu.GenerateSourceCodeString();
            }

            if (localization.uk != null)
            {
                result += ", Ukrainian: " + localization.uk.GenerateSourceCodeString();
            }

            if (localization.vi != null)
            {
                result += ", Vietnamese: " + localization.vi.GenerateSourceCodeString();
            }

            if (localization.cn_s != null)
            {
                result += ", ChineseSimplified: " + localization.cn_s.GenerateSourceCodeString();
            }

            if (localization.cn_t != null)
            {
                result += ", ChineseTraditional: " + localization.cn_t.GenerateSourceCodeString();
            }
            
            if (localization.kk != null)
            {
                result += ", Kazakh: " + localization.kk.GenerateSourceCodeString();
            }

            return result;
        }

        private static string GenerateLocalization(FieldInfo field)
        {
            var locales = field.GetCustomAttributes<LocaleAttribute>().ToArray();
            return GenerateLocalizationCode(locales);
        }

        private static string GenerateLocalization(PropertyInfo property)
        {
            var locales = property.GetCustomAttributes<LocaleAttribute>().ToArray();
            return GenerateLocalizationCode(locales);
        }

        private static string GenerateLocalization(MethodInfo method)
        {
            var locales = method.GetCustomAttributes<LocaleAttribute>().ToArray();
            return GenerateLocalizationCode(locales);
        }

        private static string GenerateLocalization(EventInfo eventInfo)
        {
            var locales = eventInfo.GetCustomAttributes<LocaleAttribute>().ToArray();
            return GenerateLocalizationCode(locales);
        }

        private static string GenerateLocalizationCode(LocaleAttribute[] locales)
        {
            var localesCode = "";

            foreach (LocaleAttribute locale in locales)
            {
                localesCode += $"\t[Locale(SystemLanguage.{locale.Language}, ";

                for (var i = 0; i < locale.Strings.Length; i++)
                {
                    localesCode += locale.Strings[i].GenerateSourceCodeString();

                    if (i + 1 < locale.Strings.Length)
                    {
                        localesCode += ", ";
                    }
                }

                localesCode += ")]\n";
            }

            return localesCode;
        }

        private static void ThrowObjectBuildError(string errorFormatString, string errorSourceName)
        {
            string message = string.Format(errorFormatString, errorSourceName);
            EditorUtility.DisplayDialog("Error!", message, "Ok");
            Debug.LogError(message);

            throw new VarwinObjectBuildException();
        }

        #endregion
    }
}
